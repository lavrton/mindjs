(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

var utils = require("./utils");

var Stage = function Stage(params) {
  if (!params) {
    utils["throw"]("params for Stage constructor required.");
  }
  if (!params.container) {
    utils["throw"]("container parameter is required.");
  }
  this._container = document.getElementById(params.container);

  this._container.style.width = params.width + "px";
  this._container.style.height = params.height + "px";

  this.width = params.width;
  this.height = params.height;

  //        this._initBackground();
  //        this._initAtomContainer();
  //        this._setupDragCamera();
  //        this._setupAtomDrag();
  //        this._setupCameraMoving();
  //        this._setupKeyboard();
};

Stage.prototype._setupAtomDrag = function () {
  var _this = this;
  var mc = new Hammer.Manager(this._container);

  mc.add(new Hammer.Pan({ threshold: 0, pointers: 0 }));

  mc.on("panstart", function (e) {
    dragElement = e.target;
  });
  mc.on("panmove", function (e) {
    var atom = dragElement._atom;
    if (!atom) {
      return;
    }
    atom.x = e.changedPointers[0].clientX + _this.camera.x;
    atom.y = e.changedPointers[0].clientY + _this.camera.y;
    atom._positioning();
  });
};

Stage.prototype.addAtom = function (o) {
  this.atoms.push(o);
  if (this._isAtomVisible(o)) {
    this._atomContainer.appendChild(o.node);
  }
};

Stage.prototype._isAtomVisible = function () {
  var cameraX = this.camera.x;
  var cameraY = this.camera.y;
  var screenWidth = this.width;
  var screenHeight = this.height;
  if (atom.x > cameraX - screenWidth && atom.x < cameraX + screenWidth * 2 && atom.y > cameraY - screenHeight && atom.y < cameraY + screenHeight * 2) {
    return true;
  } else {
    return false;
  }
};

//hide() {
//    this._container.style.display = 'none';
//}
//
//show() {
//    this._container.style.display = '';
//}

Stage.prototype.setSize = function (param) {};

Stage.prototype._positionBack = function () {
  this._back.style["background-position"] = -this.camera.x + "px " + -this.camera.y + "px";
};

Stage.prototype._initBackground = function () {
  this._back = document.createElement("div");
  this._container.appendChild(this._back);
  this._back.style.position = "absolute";
  this._back.style.transform = "translateZ(-1)";
  this._back.style["-webkit-transform"] = "translateZ(-1)";
  this._back.style.width = "100%";
  this._back.style.height = "100%";
  this._positionBack();
};

Stage.prototype._positionAtomContainer = function () {
  this._atomContainer.style.transform = "translateX(" + -this.camera.x + "px) translateY(" + -this.camera.y + "px)";
  this._atomContainer.style["-webkit-transform"] = "translateX(" + -this.camera.x + "px) translateY(" + -this.camera.y + "px)";
};

Stage.prototype._initAtomContainer = function () {
  this._atomContainer = document.createElement("div");
  this._container.appendChild(this._atomContainer);
  this._atomContainer.style.position = "absolute";
  this._atomContainer.style.transform = "translateZ(-1)";
  this._atomContainer.style["-webkit-transform"] = "translateZ(-1)";
  this._positionAtomContainer();
};

Stage.prototype._setupDragCamera = function () {
  var _this2 = this;
  var mc = new Hammer.Manager(this._back);

  mc.add(new Hammer.Pan({ threshold: 0, pointers: 0 }));

  var previous = {};
  mc.on("panstart", function (e) {
    previous = e.center;
  });
  mc.on("panmove", function (e) {
    var newPos = {
      x: e.center.x + e.deltaX,
      y: e.center.y + e.deltaY
    };
    var dx = previous.x - newPos.x;
    var dy = previous.y - newPos.y;
    _this2.camera.move(dx, dy);
    _this2._positionBack();
    _this2._positionAtomContainer();
    _this2._requestCheckVisiability();
    previous = newPos;
  });
};

Stage.prototype._requestCheckVisiability = function () {
  var _this3 = this;
  if (this._checkVisibilityWaiting) {
    return;
  }
  this._checkVisibilityWaiting = true;
  setTimeout(function () {
    _this3.atoms.forEach(function (atom) {
      var visible = _this3._isAtomVisible(atom);
      if (visible && !atom.node.parentElement) {
        _this3._atomContainer.appendChild(atom.node);
      } else if (!visible && atom.node.parentElement) {
        atom.node.parentElement.removeChild(atom.node);
      }
    });
    _this3._checkVisibilityWaiting = false;
  }, 100);
};

Stage.prototype._setupCameraMoving = function () {};

Stage.prototype._setupKeyboard = function () {
  var _this4 = this;
  window.onkeydown = function (e) {
    if (e.keyCode === 37) {
      _this4.camera.x -= 3;
    }
    if (e.keyCode === 38) {
      _this4.camera.y -= 3;
    }
    if (e.keyCode === 39) {
      _this4.camera.x += 3;
    }
    if (e.keyCode === 40) {
      _this4.camera.y += 3;
    }
  };
};

_prototypeProperties(Stage, null, {
  background: {
    set: function (background) {
      if (background.indexOf("/") !== -1) {
        this._back.style["background-image"] = "url(\"" + background + "\")";
        this._back.style["background-color"] = "";
      } else {
        this._back.style["background-image"] = "";
        this._back.style["background-color"] = background;
      }
    },
    enumerable: true
  }
});

module.exports = Stage;
//this._stage.setWidth(param.width);
//this._stage.setHeight(param.height);
//this._back.width(param.width);
//this._back.height(param.height);
//this.camera.trigger('change');
//this.camera.trigger('change:scale');
//this._backLayer.draw();

},{"./utils":3}],2:[function(require,module,exports){
"use strict";

(function (root, factory) {
  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === "function" && define.amd) {
    define([], function () {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Mind = factory();
    });

    // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== "undefined") {
    module.exports = factory();
    window.Mind = module.exports;
    // Finally, as a browser global.
  } else {
    root.Mind = factory();
  }
})(this, function factory() {
  var Stage = require("./Stage");
  var Mind = {
    Stage: Stage
  };
  return Mind;
});

},{"./Stage":1}],3:[function(require,module,exports){
"use strict";

module.exports["throw"] = function (message) {
  throw "MindJS Error: " + message;
};

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
